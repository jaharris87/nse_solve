##
## System configurations and architecture/installation specific MACROS
##

## Define programming envionment if not set or on a Cray machine
MACHINE=$(shell echo $(HOSTNAME) | sed 's/\(-[a-zA-Z]*\)\?[0-9]\+$$//')
CRAY_MACHINE = \
               titan \
               hopper \
               darter \
               edison \
               chester \
               beacon \
               mira

ifeq (,$(filter $(MACHINE),$(CRAY_MACHINE)))
    ## Set flag to not use compiler wrapper
    USE_CRAY ?= 0

    ## Use GNU compiler by default, unless PE_ENV environment variable already set
    PE_ENV  ?= GNU
    #PE_ENV  ?= PGI
    #PE_ENV  ?= INTEL
    #PE_ENV  ?= CRAY
    #PE_ENV  ?= ABSOFT

    FC_MPI  = mpif90
    CC_MPI  = mpicc
    CXX_MPI = mpic++
    LDR_MPI = mpif90

    LAPACK_VER     ?= NETLIB
    GPU_LAPACK_VER ?= MAGMA
else
    ## Set flag to use compiler wrapper
    USE_CRAY ?= 1

    FC      = ftn
    CC      = cc
    CXX     = CC
    LDR     = ftn
    FC_MPI  = ftn
    CC_MPI  = cc
    CXX_MPI = CC
    LDR_MPI = ftn

    LAPACK_VER     ?= LIBSCI
    GPU_LAPACK_VER ?= LIBSCIACC
endif

#-------------------------------------------------------------------------------
# Define compiler specific variables
#-------------------------------------------------------------------------------
LC_PE_ENV = $(shell echo $(PE_ENV) | tr A-Z a-z)
GCC_VER   = 3
INTEL_VER = 0
PGI_VER   = 0
CRAY_VER  = 0

LIBSCI_EXTRA =

ifeq ($(PE_ENV),INTEL)
    
    ifeq ($(USE_CRAY),0)
        FC      = ifort
        CC      = icc
        CXX     = icpc
        LDR     = ifort

        ARCHOPT = -xHost

        EXTRA_FFLAGS   =
        EXTRA_CCFLAGS  =
        EXTRA_CXXFLAGS =
        EXTRA_LDRFLAGS =
        EXTRA_LINK     =

        INTEL_LIBS =
    else ifeq ($(MACHINE),beacon)
        ARCHOPT = -xAVX
    else ifeq ($(MACHINE),darter)
        ARCHOPT = -xAVX
    else ifeq ($(MACHINE),edison)
        ARCHOPT = -xCORE-AVX-I
    else ifeq ($(MACHINE),titan)
        ARCHOPT = -msse3
    else ifeq ($(MACHINE),chester)
        ARCHOPT = -msse3
    else ifeq ($(MACHINE),hopper)
        ARCHOPT = -msse3
    endif

    ifeq ($(MPI_MODE),ON)
        ifeq ($(OPENMP_MODE),ON)
            INLINE  = -ip
        else
            INLINE  = -ipo
        endif
    else
        INLINE  = -ipo
    endif

    HIGHOPT = -O3 $(ARCHOPT) $(INLINE)
    MEDOPT  = -O2 $(ARCHOPT)
    LOWOPT  = -O1
    NOOPT   = -O0

    DEBUGOPT = $(HIGHOPT) -g -traceback
    DEBUG    = $(NOOPT) -g -check all,noarg_temp_created -traceback

    R8      = -real-size 64 -integer-size 32
    FCLIST  = -list
    CCLIST  = -list
    CXXLIST = -list

    INTEL_VER = $(shell echo $(INTEL_VERSION)| cut -d. -f1,2 | sed -e "s/\.//g")
    GCC_VER   = 43
    PE_VER    = 120

    LIBSCI_VER = $(PE_VER)

    ifneq ($(OPENMP_MODE),ON)
        OMP_FLAG   = -openmp-stubs
        ifneq ($(FC),ftn)
            LIBSCI_OMP = -liomp5 -lpthread
        endif
    else
        OMP_FLAG   = -openmp
    endif

else ifeq ($(PE_ENV),PGI)
    
    ifeq ($(USE_CRAY),0)
        FC      = pgf90
        CC      = pgcc
        CXX     = pgCC
        LDR     = pgf90

        ARCHOPT = -Mvect=assoc,simd:128,sse

        EXTRA_CXXFLAGS = 
        EXTRA_LDRFLAGS =
        EXTRA_LIBS     = 
        EXTRA_LINK     = -rpath=/opt/pgi/default/linux86-64/default/libso

        LIBSCI_EXTRA   =
    endif
    INLINE  = -Mipa=fast

    HIGHOPT = -fastsse $(ARCHOPT) $(INLINE)
    MEDOPT  = -O2 $(ARCHOPT)
    LOWOPT  = -O1
    NOOPT   = -O0

    DEBUGOPT = $(HIGHOPT) -gopt
    DEBUG    = $(NOOPT) -g -Minfo=all

    R8      = -r8 -i4
    FCLIST  = -Mlist
    CCLIST  = -Mlist
    CXXLIST = -Mlist

    PGI_VER = $(shell echo $(PGI_VERSION) | cut -d. -f1,2 | sed -e "s/\.//g")
    PE_VER  = 119

    LIBSCI_VER   = $(PE_VER)

    ifneq ($(OPENMP_MODE),ON)
        OMP_FLAG   = -mp=nonuma -Mnoopenmp
        ifneq ($(FC),ftn)
            LIBSCI_OMP = $(OMP_FLAG)
        endif
    else
        OMP_FLAG = -mp
        ifneq ($(FC),ftn)
            LIBSCI_OMP = -lpgmp -lpthread
        endif
    endif

else ifeq ($(PE_ENV),GNU)
    
    ifeq ($(USE_CRAY),0)
        FC  = gfortran
        CC  = gcc
        CXX = g++
        LDR = gfortran

        ARCHOPT        = -march=native

        EXTRA_FFLAGS   = -fno-second-underscore
        EXTRA_CCFLAGS  = -fno-second-underscore
        EXTRA_CXXFLAGS = -fno-second-underscore
        EXTRA_LDRFLAGS = -fno-second-underscore
        EXTRA_LIBS     =
        EXTRA_LINK     = 
        LIBSCI_OMP     = -lgfortran
    endif

    HIGHOPT = -O3 $(ARCHOPT) $(INLINE)
    MEDOPT  = -O2 $(ARCHOPT)
    LOWOPT  = -O1
    NOOPT   = -O0

    DEBUG   = $(NOOPT) -g -fbacktrace -Wall -Wno-unused -fcheck=all

    GCC_VER = $(shell echo $(GCC_VERSION) | cut -d. -f1,2 | sed -e "s/\.//g")
    PE_VER  = $(GCC_VER)

    R8 = -fdefault-real-8 -fdefault-double-8

    LIBSCI_VER = $(PE_VER)
    
    ifneq ($(OPENMP_MODE),ON)
        OMP_FLAG = -lgomp -lpthread
        ifneq ($(FC),ftn)
            LIBSCI_OMP += $(OMP_FLAG)
        endif
    else
        OMP_FLAG = -fopenmp
    endif

else ifeq ($(PE_ENV),CRAY)
    
    ifeq ($(USE_CRAY),0)
        FC  = crayftn
        CC  = craycc
        CXX = crayCC
        LDR = crayftn

        ## This will be set on a cray machine based on the craype target module loaded
        CRAY_CPU_TARGET ?= x86-64
        ARCHOPT        = -h cpu=$(CRAY_CPU_TARGET)

        EXTRA_FFLAGS   =
        EXTRA_CCFLAGS  = -h gnu
        EXTRA_CXXFLAGS = -h gnu
        EXTRA_LDRFLAGS = 

        EXTRA_LIBS =
        EXTRA_LINK =
    endif

    INLINE_DB = ./$(EXE)_inline
    INLINE    = -h wp -h pl=$(INLINE_DB)

    HIGHOPT = -O2 $(ARCHOPT) $(INLINE)
    MEDOPT  = -O2 $(ARCHOPT)
    LOWOPT  = -O1
    NOOPT   = -O0

    DEBUGOPT = $(HIGHOPT) -G1
    DEBUG    = -eD

    R8 = -sreal64 -sinteger32

    FCLIST  = -rm
    CCLIST  = -h list=a
    CXXLIST = -h list=a

    CRAY_VER   = $(shell echo $(PE_LEVEL) | cut -d. -f1,2 | sed -e "s/\.//g")
    PE_VER     = 74

    #LIBSCI_VER = $(CRAY_VER)
    LIBSCI_VER = $(PE_VER)

    ifneq ($(OPENMP_MODE),ON)
        OMP_FLAG = -h noomp
    endif

else

    $(error PE_ENV = \"$(PE_ENV)\" not supported )

endif

#-------------------------------------------------------------------------------
# Library definitions and compile/link flags
#-------------------------------------------------------------------------------

## Cray LibSci
ifneq ($(FC),ftn)
    LIBSCI_EXTRA += -lstdc++ $(LIBSCI_OMP)
    LIBSCI_DIR    = /opt/cray/libsci/default/$(PE_ENV)/$(PE_VER)/$(CRAY_CPU_TARGET)
    LIBSCI_INC    = -I$(LIBSCI_DIR)/include
    LIBSCI_LIBDIR = -L$(LIBSCI_DIR)/lib
    LIBSCI_LIBS   = -lscicpp_$(LC_PE_ENV) -lsci_$(LC_PE_ENV)_mp $(LIBSCI_EXTRA)
endif

## Intel compiler
INTEL_PATH  ?= /opt/intel/composerxe
INTEL_INC    = -I$(INTEL_PATH)/compiler/include
INTEL_LIBDIR = -L$(INTEL_PATH)/compiler/lib/intel64
ifneq ($(FC),ftn)
    INTEL_LIBS  += -limf -lifport -lifcore -lm
endif

## Intel Math Kernel Library (MKL)
MKLROOT    ?= $(INTEL_PATH)/mkl
MKL_LIBDIR  = -L$(MKLROOT)/lib/intel64
ifeq ($(OPENMP_MODE),ON)
    ifeq ($(PE_ENV),INTEL)
        MKL_INC += -mkl=sequential
#       MKL_INC  = -I$(MKLROOT)/include
#       MKL_LIBS = -lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lpthread
    else ifeq ($(PE_ENV),PGI)
        MKL_INC  = -I$(MKLROOT)/include
        MKL_LIBS = -lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lpthread
    else ifeq ($(PE_ENV),GNU)
        MKL_INC  = -I$(MKLROOT)/include
        MKL_LIBS = -lmkl_gf_lp64 -lmkl_core -lmkl_sequential -lpthread
    else ifeq ($(PE_ENV),CRAY)
        MKL_INC  = -I$(MKLROOT)/include
        MKL_LIBS = -lmkl_gf_lp64 -lmkl_core -lmkl_sequential -lpthread
    endif
else
    ifeq ($(PE_ENV),INTEL)
        MKL_INC += -mkl=sequential
#       MKL_INC += -openmp -I$(MKLROOT)/include
#       MKL_LIBS = -lmkl_intel_lp64 -lmkl_core -lmkl_intel_thread -lpthread
    else ifeq ($(PE_ENV),PGI)
        MKL_INC  = -I$(MKLROOT)/include
        MKL_LIBS = -lmkl_intel_lp64 -lmkl_core -lmkl_sequential -lpthread
#       MKL_INC += -mp -pgf90libs -I$(MKLROOT)/include
#       MKL_LIBS = -lmkl_intel_lp64 -lmkl_core -lmkl_pgi_thread -lpthread -pgf90libs
    else ifeq ($(PE_ENV),GNU)
        MKL_INC  = -I$(MKLROOT)/include
        MKL_LIBS = -lmkl_gf_lp64 -lmkl_core -lmkl_sequential -lpthread
#       MKL_INC += -fopenmp -I$(MKLROOT)/include
#       MKL_LIBS = -lmkl_gf_lp64 -lmkl_core -lmkl_gnu_thread -lpthread
    else ifeq ($(PE_ENV),CRAY)
        MKL_INC  = -I$(MKLROOT)/include
        MKL_LIBS = -lmkl_gf_lp64 -lmkl_core -lmkl_sequential -lpthread
#       MKL_INC += -h omp -I$(MKLROOT)/include
#       MKL_LIBS = -lmkl_gf_lp64 -lmkl_core -lmkl_gnu_thread -lpthread
    endif
endif

ACCEL_INC      = -framework Accelerate

## ATLAS
ATLAS_DIR     ?= /usr/local/atlas
ATLAS_INC      = -I$(ATLAS_DIR)/include
ATLAS_LIBDIR   = -L$(ATLAS_DIR)/lib
ATLAS_LIBS     = -llapack -lf77blas -lcblas -latlas

## NETLIB
NETLIB_DIR     = ../tools/LAPACK
BLAS_LVL1_SRC  = dlamch.f dscal.f dswap.f idamax.f lsame.f xerbla.f
BLAS_LVL2_SRC  = dger.f dgemv.f
BLAS_LVL3_SRC  = dgemm.f dtrsm.f
LAPACK_UTL_SRC = ieeeck.f iparmq.f
LAPACK_AUX_SRC = dgetf2.f dlaswp.f ilaenv.f
NETLIB_SRC     = $(addprefix $(NETLIB_DIR)/, \
		 $(BLAS_LVL1_SRC) $(BLAS_LVL2_SRC) $(BLAS_LVL3_SRC) \
		 $(LAPACK_UTL_SRC) $(LAPACK_AUX_SRC) \
		 dgetrf.f dgetrs.f dgesv.f)
NETLIB_OBJ     = $(addsuffix .o,$(basename $(NETLIB_SRC)))

LAPACK_INC    = $($(LAPACK_VER)_INC)
LAPACK_LIBDIR = $($(LAPACK_VER)_LIBDIR)
LAPACK_LIBS   = $($(LAPACK_VER)_LIBS)
LAPACK_SRC    = $($(LAPACK_VER)_SRC)
LAPACK_OBJ    = $(addsuffix .o,$(basename $(LAPACK_SRC)))

LAPACK_OBJ_F90 = $(addsuffix .o,$(basename $(filter %.f90 %.F90,$(LAPACK_SRC))))
LAPACK_OBJ_F   = $(addsuffix .o,$(basename $(filter %.f %.F,$(LAPACK_SRC))))
LAPACK_OBJ_C   = $(addsuffix .o,$(basename $(filter %.c,$(LAPACK_SRC))))
LAPACK_OBJ_CPP = $(addsuffix .o,$(basename $(filter %.cpp,$(LAPACK_SRC))))

## PARDISO
PARDISO_INC    = $(MKL_INC)
PARDISO_LIBDIR = $(MKL_LIBDIR)
PARDISO_LIBS   = $(MKL_LIBS)

## MA48
MA48_DIR      ?= .
MA48_SRC       = $(addprefix $(MA48_DIR)/, \
		 MA48.f)
MA48_OBJ       = $(addsuffix .o,$(basename $(MA48_SRC)))

## MA41
MA41_DIR      ?= .
MA41_SRC       = $(addprefix $(MA41_DIR)/, \
		 MA41.f)
MA41_OBJ       = $(addsuffix .o,$(basename $(MA41_SRC)))

## MA28
MA28_DIR      ?= .
MA28_SRC       = $(addprefix $(MA28_DIR)/, \
		 MA28.f)
MA28_OBJ       = $(addsuffix .o,$(basename $(MA28_SRC)))

SOLVER_INC     = $($(MATRIX_SOLVER)_INC)
SOLVER_LIBDIR  = $($(MATRIX_SOLVER)_LIBDIR)
SOLVER_LIBS    = $($(MATRIX_SOLVER)_LIBS)
SOLVER_SRC     = $($(MATRIX_SOLVER)_SRC)
SOLVER_OBJ     = $(addsuffix .o,$(basename $(SOLVER_SRC)))

SOLVER_OBJ_F90 = $(addsuffix .o,$(basename $(filter %.f90 %.F90,$(SOLVER_SRC))))
SOLVER_OBJ_F   = $(addsuffix .o,$(basename $(filter %.f %.F,$(SOLVER_SRC))))
SOLVER_OBJ_C   = $(addsuffix .o,$(basename $(filter %.c,$(SOLVER_SRC))))
SOLVER_OBJ_CPP = $(addsuffix .o,$(basename $(filter %.cpp,$(SOLVER_SRC))))

EXTRA_LIBDIR = $($(PE_ENV)_LIBDIR)
EXTRA_LIBS  += $($(PE_ENV)_LIBS)
EXTRA_SRC    = 
EXTRA_OBJ    = $(addsuffix .o,$(basename $(EXTRA_SRC)))
EXTRA_OBJ   += $(LAPACK_OBJ) $(SOLVER_OBJ)

EXTRA_FFLAGS   += 
EXTRA_CCFLAGS  += 
EXTRA_CXXFLAGS += 
EXTRA_LDRFLAGS += 
EXTRA_LINK     += $(LAPACK_INC) $(SOLVER_INC) $(EXTRA_LIBDIR) $(EXTRA_LIBS)

OPT     = $(HIGHOPT)
LAPACK  = $(LAPACK_INC)
PARDISO = $(PARDISO_INC)

## Define compiler flags
FFLAGS   = $(R8) $(OMP_FLAG)
LDRFLAGS = $(R8) $(OMP_FLAG)
CCFLAGS  = $(OMP_FLAG)
CXXFLAGS = $(OMP_FLAG)

ifeq ($(CMODE),OPTIMIZE)
    FFLAGS   += $(OPT) $(EXTRA_FFLAGS)
    CCFLAGS  += $(OPT) $(EXTRA_CCFLAGS)
    CXXFLAGS += $(OPT) $(EXTRA_CXXFLAGS)
    LDRFLAGS += $(OPT) $(EXTRA_LDRFLAGS)
else ifeq ($(CMODE),DEBUG)
    FFLAGS   += $(DEBUG) $(EXTRA_FFLAGS)
    CCFLAGS  += $(DEBUG) $(EXTRA_CCFLAGS)
    CXXFLAGS += $(DEBUG) $(EXTRA_CXXFLAGS)
    LDRFLAGS += $(DEBUG) $(EXTRA_LDRFLAGS)
else ifeq ($(CMODE),DEBUGOPT)
    FFLAGS   += $(DEBUGOPT) $(EXTRA_FFLAGS)
    CCFLAGS  += $(DEBUGOPT) $(EXTRA_CCFLAGS)
    CXXFLAGS += $(DEBUGOPT) $(EXTRA_CXXFLAGS)
    LDRFLAGS += $(DEBUGOPT) $(EXTRA_LDRFLAGS)
else ifeq ($(CMODE),PROFILE)
    FFLAGS   += $(PROFILE) $(EXTRA_FFLAGS)
    CCFLAGS  += $(PROFILE) $(EXTRA_CCFLAGS)
    CXXFLAGS += $(PROFILE) $(EXTRA_CXXFLAGS)
    LDRFLAGS += $(PROFILE) $(EXTRA_LDRFLAGS)
endif

## Configure Libraries and files to link appropriate matrix solver
LIBS = $(LAPACK_LIBDIR) $(LAPACK_LIBS) $(SOLVER_LIBDIR) $(SOLVER_LIBS)

## Choose Driver and Compiler for MPI/nonMPI
ifeq ($(MPI_MODE),ON)
    FC     = $(FC_MPI)
    CC     = $(CC_MPI)
    CXX    = $(CXX_MPI)
    LDR    = $(LDR_MPI)
    DRIVER = $(DRIVER_MPI)
    FCL    = $(FC_MPI)
    CCL    = $(CC_MPI)
    CXXL   = $(CXX_MPI)
    LDRL   = $(LDR_MPI)
else
    DRIVER = $(DRIVER_SM)
    FCL    = $(FC)
    CCL    = $(CC)
    CXXL   = $(CXX)
    LDRL   = $(LDR)
endif
